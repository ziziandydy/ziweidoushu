/**
 * ÂâçÁ´Ø API ‰ª£ÁêÜ - ÈÄ£Êé•ÁúüÂØ¶ÁöÑÂæåÁ´Ø API
 */

window.RealZiweiAPI = {
    async calculateDestiny(userInput) {
        try {
            console.log('üîÆ Ë™øÁî®ÁúüÂØ¶ÂæåÁ´Ø API:', userInput);

            // Ë™øÁî® Vercel API Ë∑ØÁî±
            const response = await fetch('/api/calculate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userInput)
            });

            const result = await response.json();
            console.log('üîÆ ÂæåÁ´Ø API ÂõûÊáâ:', result);

            if (result.success) {
                return {
                    success: true,
                    palaces: result.palaces,
                    source: 'vercel-api',
                    timestamp: new Date().toISOString()
                };
            } else {
                return {
                    success: false,
                    error: result.error
                };
            }

        } catch (error) {
            console.error('üåê API Ë™øÁî®ÈåØË™§:', error);

            // Â¶ÇÊûúÂæåÁ´Ø API ‰∏çÂèØÁî®ÔºåÂõûÈÄÄÂà∞Ê®°Êì¨Ë®àÁÆó
            console.log('üîÑ ÂõûÈÄÄÂà∞Ê®°Êì¨Ë®àÁÆó');
            return this.mockCalculation(userInput);
        }
    },

    // Ê®°Êì¨Ë®àÁÆó‰ΩúÁÇ∫ fallback
    mockCalculation(userInput) {
        console.log('üé≠ Âü∑Ë°åÊ®°Êì¨Ë®àÁÆó');

        const palaces = [
            'ÂëΩÂÆÆ', 'ÂÖÑÂºü', 'Â§´Â¶ª', 'Â≠êÂ•≥', 'Ë≤°Â∏õ', 'ÁñæÂéÑ',
            'ÈÅ∑Áßª', '‰∫§Âèã', '‰∫ãÊ•≠', 'Áî∞ÂÆÖ', 'Á¶èÂæ∑', 'Áà∂ÊØç'
        ];

        const majorStarsPool = [
            'Á¥´ÂæÆ', 'Â§©Â∫ú', 'Â§©Ê©ü', 'Â§™ÈôΩ', 'Ê≠¶Êõ≤', 'Â§©Âêå', 'ÂªâË≤û', 'Â§™Èô∞'
        ];

        const palacesData = palaces.map((name, index) => ({
            palaceName: name,
            palaceIndex: index,
            majorStars: Math.random() > 0.2 ? [{
                name: majorStarsPool[index % majorStarsPool.length],
                energyLevel: Math.floor(Math.random() * 40) + 60,
                energyType: index % 2 === 0 ? 'yang' : 'yin'
            }] : [],
            minorStars: [],
            energy: Math.floor(Math.random() * 40) + 50
        }));

        return {
            success: true,
            destinyInfo: {
                element: ['Èáë', 'Êú®', 'Ê∞¥', 'ÁÅ´', 'Âúü'][Math.floor(Math.random() * 5)],
                destinyMaster: majorStarsPool[Math.floor(Math.random() * majorStarsPool.length)],
                bodyMaster: majorStarsPool[Math.floor(Math.random() * majorStarsPool.length)],
                palaces: palacesData
            },
            userInfo: userInput,
            source: 'mock-fallback',
            timestamp: new Date().toISOString()
        };
    }
};
